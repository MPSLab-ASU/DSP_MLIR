Enabling Delay Optimization
Enabling Delay Optimization
Enabling Delay Optimization
delaySecondArg.getDefiningOp()= 0x55d36a309060
Defining Opp is not constant so no lowering for now
*****SecondValueInt = 2 ***
tensorType->getRank = 1
tensorType->getNumElements = 10
lowerBounds.size() = 1
steps.size() = 1
tensorType.getShape() = 10
254
264
delaySecondArg.getDefiningOp()= 0x55d36a321830
Defining Opp is not constant so no lowering for now
*****SecondValueInt = 4 ***
tensorType->getRank = 1
tensorType->getNumElements = 10
lowerBounds.size() = 1
steps.size() = 1
tensorType.getShape() = 10
254
264
; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@nl = internal constant [2 x i8] c"\0A\00"
@frmt_spec = internal constant [4 x i8] c"%f \00"

declare ptr @malloc(i64)

declare void @free(ptr)

declare i32 @printf(ptr, ...)

define void @main() !dbg !3 {
  %1 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 10) to i64)), !dbg !6
  %2 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %1, 0, !dbg !6
  %3 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %2, ptr %1, 1, !dbg !6
  %4 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %3, i64 0, 2, !dbg !6
  %5 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %4, i64 10, 3, 0, !dbg !6
  %6 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %5, i64 1, 4, 0, !dbg !6
  %7 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 10) to i64)), !dbg !7
  %8 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %7, 0, !dbg !7
  %9 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %8, ptr %7, 1, !dbg !7
  %10 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %9, i64 0, 2, !dbg !7
  %11 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %10, i64 10, 3, 0, !dbg !7
  %12 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %11, i64 1, 4, 0, !dbg !7
  %13 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 1) to i64)), !dbg !8
  %14 = insertvalue { ptr, ptr, i64 } undef, ptr %13, 0, !dbg !8
  %15 = insertvalue { ptr, ptr, i64 } %14, ptr %13, 1, !dbg !8
  %16 = insertvalue { ptr, ptr, i64 } %15, i64 0, 2, !dbg !8
  %17 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 1) to i64)), !dbg !9
  %18 = insertvalue { ptr, ptr, i64 } undef, ptr %17, 0, !dbg !9
  %19 = insertvalue { ptr, ptr, i64 } %18, ptr %17, 1, !dbg !9
  %20 = insertvalue { ptr, ptr, i64 } %19, i64 0, 2, !dbg !9
  %21 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (double, ptr null, i64 10) to i64)), !dbg !10
  %22 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } undef, ptr %21, 0, !dbg !10
  %23 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %22, ptr %21, 1, !dbg !10
  %24 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %23, i64 0, 2, !dbg !10
  %25 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %24, i64 10, 3, 0, !dbg !10
  %26 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %25, i64 1, 4, 0, !dbg !10
  %27 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %28 = getelementptr double, ptr %27, i64 0, !dbg !10
  store double 1.000000e+01, ptr %28, align 8, !dbg !10
  %29 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %30 = getelementptr double, ptr %29, i64 1, !dbg !10
  store double 2.000000e+01, ptr %30, align 8, !dbg !10
  %31 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %32 = getelementptr double, ptr %31, i64 2, !dbg !10
  store double 3.000000e+01, ptr %32, align 8, !dbg !10
  %33 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %34 = getelementptr double, ptr %33, i64 3, !dbg !10
  store double 4.000000e+01, ptr %34, align 8, !dbg !10
  %35 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %36 = getelementptr double, ptr %35, i64 4, !dbg !10
  store double 5.000000e+01, ptr %36, align 8, !dbg !10
  %37 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %38 = getelementptr double, ptr %37, i64 5, !dbg !10
  store double 6.000000e+01, ptr %38, align 8, !dbg !10
  %39 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %40 = getelementptr double, ptr %39, i64 6, !dbg !10
  store double 7.000000e+01, ptr %40, align 8, !dbg !10
  %41 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %42 = getelementptr double, ptr %41, i64 7, !dbg !10
  store double 8.000000e+01, ptr %42, align 8, !dbg !10
  %43 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %44 = getelementptr double, ptr %43, i64 8, !dbg !10
  store double 9.000000e+01, ptr %44, align 8, !dbg !10
  %45 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 1, !dbg !10
  %46 = getelementptr double, ptr %45, i64 9, !dbg !10
  store double 1.000000e+02, ptr %46, align 8, !dbg !10
  %47 = extractvalue { ptr, ptr, i64 } %20, 1, !dbg !9
  store double 2.000000e+00, ptr %47, align 8, !dbg !9
  %48 = extractvalue { ptr, ptr, i64 } %16, 1, !dbg !8
  store double 4.000000e+00, ptr %48, align 8, !dbg !8
  br label %49, !dbg !7

49:                                               ; preds = %52, %0
  %50 = phi i64 [ 0, %0 ], [ %55, %52 ]
  %51 = icmp slt i64 %50, 2, !dbg !7
  br i1 %51, label %52, label %56, !dbg !7

52:                                               ; preds = %49
  %53 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %12, 1, !dbg !7
  %54 = getelementptr double, ptr %53, i64 %50, !dbg !7
  store double 0.000000e+00, ptr %54, align 8, !dbg !7
  %55 = add i64 %50, 1, !dbg !7
  br label %49, !dbg !7

56:                                               ; preds = %49
  br label %57, !dbg !6

57:                                               ; preds = %60, %56
  %58 = phi i64 [ 0, %56 ], [ %63, %60 ]
  %59 = icmp slt i64 %58, 4, !dbg !6
  br i1 %59, label %60, label %64, !dbg !6

60:                                               ; preds = %57
  %61 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %6, 1, !dbg !6
  %62 = getelementptr double, ptr %61, i64 %58, !dbg !6
  store double 0.000000e+00, ptr %62, align 8, !dbg !6
  %63 = add i64 %58, 1, !dbg !6
  br label %57, !dbg !6

64:                                               ; preds = %57
  br label %65, !dbg !11

65:                                               ; preds = %68, %64
  %66 = phi i64 [ 0, %64 ], [ %73, %68 ]
  %67 = icmp slt i64 %66, 10, !dbg !11
  br i1 %67, label %68, label %74, !dbg !11

68:                                               ; preds = %65
  %69 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %6, 1, !dbg !11
  %70 = getelementptr double, ptr %69, i64 %66, !dbg !11
  %71 = load double, ptr %70, align 8, !dbg !11
  %72 = call i32 (ptr, ...) @printf(ptr @frmt_spec, double %71), !dbg !11
  %73 = add i64 %66, 1, !dbg !11
  br label %65, !dbg !11

74:                                               ; preds = %65
  %75 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %26, 0, !dbg !10
  call void @free(ptr %75), !dbg !10
  %76 = extractvalue { ptr, ptr, i64 } %20, 0, !dbg !9
  call void @free(ptr %76), !dbg !9
  %77 = extractvalue { ptr, ptr, i64 } %16, 0, !dbg !8
  call void @free(ptr %77), !dbg !8
  %78 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %12, 0, !dbg !7
  call void @free(ptr %78), !dbg !7
  %79 = extractvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %6, 0, !dbg !6
  call void @free(ptr %79), !dbg !6
  ret void, !dbg !12
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "MLIR", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "dsp_op_delay_simple.py", directory: "../../../test/Examples/Toy/Ch6")
!3 = distinct !DISubprogram(name: "main", linkageName: "main", scope: !2, file: !2, line: 10, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!4 = !DISubroutineType(cc: DW_CC_normal, types: !5)
!5 = !{}
!6 = !DILocation(line: 31, column: 11, scope: !3)
!7 = !DILocation(line: 30, column: 11, scope: !3)
!8 = !DILocation(line: 28, column: 11, scope: !3)
!9 = !DILocation(line: 27, column: 11, scope: !3)
!10 = !DILocation(line: 14, column: 11, scope: !3)
!11 = !DILocation(line: 33, column: 3, scope: !3)
!12 = !DILocation(line: 10, column: 1, scope: !3)

